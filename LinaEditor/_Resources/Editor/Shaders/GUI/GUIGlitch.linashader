/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#lina_variant
#name : Default
#blend: LINA_BLEND_ALPHA
#depth: LINA_DEPTH_NONE
#target: LINA_TARGET_SWAPCHAIN
#cull: LINA_CULL_NONE
#face: LINA_FACE_CCW
#lina_end

#lina_vs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Editor/Shaders/Common/EditorPassGUI.linashader"

layout (location = 0) in vec2 pos;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec4 col;

layout (location = 0) out vec4 outCol;
layout (location = 1) out vec2 outUV;

void main()
{
   outCol = col;
   outUV = uv;
   gl_Position = LINA_VIEW.proj * vec4(pos.x, pos.y, 0.0f, 1.0);
}

#lina_end

#lina_fs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Editor/Shaders/Common/EditorPassGUI.linashader"

layout (location = 0) in vec4 inCol;
layout (location = 1) in vec2 inUV;

layout (location = 0) out vec4 outFragColor;


struct LinaGUIMaterial
{
   vec4 uvTilingAndOffset;
   LinaTexture2D diffuse;
};

layout( push_constant ) uniform constants
{
	uint materialIndex;
} PushConstants;

LinaGUIMaterial GetMaterial(uint index)
{
   LinaGUIMaterial mat;
   mat.uvTilingAndOffset.x = uintBitsToFloat(LINA_EDITOR_MATERIALS.data[index++]);
   mat.uvTilingAndOffset.y = uintBitsToFloat(LINA_EDITOR_MATERIALS.data[index++]);
   mat.uvTilingAndOffset.z = uintBitsToFloat(LINA_EDITOR_MATERIALS.data[index++]);
   mat.uvTilingAndOffset.w = uintBitsToFloat(LINA_EDITOR_MATERIALS.data[index++]);

   mat.diffuse.txt = LINA_EDITOR_MATERIALS.data[index++];
   mat.diffuse.smp = LINA_EDITOR_MATERIALS.data[index++];

   return mat;
}

void main()
{
   LinaGUIMaterial material = GetMaterial(PushConstants.materialIndex);

   vec4 color = inCol;

   float elapsedTime = LINA_GLOBAL.deltaElapsed.y;
// UV coordinates
vec2 uv = inUV * material.uvTilingAndOffset.rg + material.uvTilingAndOffset.ba;

// Chromatic aberration strength (can be adjusted for the desired effect)
float chromaticAberrationStrength = 0.1 * sin(elapsedTime * 10);  // Adjust this value for more/less effect

// Modify the UVs for each color channel
vec2 uvRed = uv + vec2(chromaticAberrationStrength, 0.0);    // Red channel offset
vec2 uvGreen = uv + vec2(0.0, 0.0);                          // Green channel (no offset)
vec2 uvBlue = uv + vec2(-chromaticAberrationStrength, 0.0);   // Blue channel offset

// Sample the texture with modified UVs for each color channel
vec4 sampledTextureRed = texture(sampler2D(LINA_TEXTURES[material.diffuse.txt], LINA_SAMPLERS[material.diffuse.smp]), uvRed);
vec4 sampledTextureGreen = texture(sampler2D(LINA_TEXTURES[material.diffuse.txt], LINA_SAMPLERS[material.diffuse.smp]), uvGreen);
vec4 sampledTextureBlue = texture(sampler2D(LINA_TEXTURES[material.diffuse.txt], LINA_SAMPLERS[material.diffuse.smp]), uvBlue);
vec4 sampledTexture = texture(sampler2D(LINA_TEXTURES[material.diffuse.txt], LINA_SAMPLERS[material.diffuse.smp]), uv);

// Combine the RGB channels with the original color
color.r *= sampledTextureRed.r;   // Red channel is offset
color.g *= sampledTextureGreen.g; // Green channel stays the same
color.b *= sampledTextureBlue.b;  // Blue channel is offset
color.a = sampledTexture.a;

// Final output color
outFragColor = color;

}


#lina_end
