/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#lina_variant

#name : "Default"
#vertex: "Resources/Core/Shaders/Common/MainVertexStatic.linashader"
#frag: "Resources/Core/Shaders/Common/MainFragForward.linashader"
#pass: "Resources/Editor/Shaders/Common/RenderPass_World.linashader"
#blend: LINA_BLEND_ALPHA
#depth: LINA_DEPTH_NONE
#target: LINA_TARGET_RGBA8
#cull: LINA_CULL_BACK

#lina_end

#lina_variant

#name : "EntityID"
#vertex: "Resources/Core/Shaders/Common/MainVertexStaticEntityID.linashader"
#frag: "Resources/Editor/Shaders/Common/MainFragEntityID.linashader"
#pass: "Resources/Editor/Shaders/Common/RenderPass_EntityID.linashader"
#blend: LINA_BLEND_NONE
#depth: LINA_DEPTH_NONE
#target: LINA_TARGET_R32U
#cull: LINA_CULL_BACK

#lina_end

#lina_vs

layout (location = 0) out flat uint outMaterialIndex;

void LINA_VERTEX_MAIN(in LinaVertexInput inVertex, out LinaVertexOutput outVertex)
{
   // Retrieve draw arguments and entity data
   DrawArguments drawArguments = LINA_DRAW_ARGUMENTS.data[PushConstants.baseInstanceIndex + gl_InstanceIndex];
   LinaEntity entity = LINA_GET_ENTITY(drawArguments.entityIndex);
   
   // Compute world position of the cube's vertex
   vec4 worldPos4 = entity.modelMatrix * vec4(inVertex.pos, 1.0);
   vec3 worldPos = vec3(worldPos4);

   // Transform cube's world position to view space
   vec4 cubeViewPos = LINA_VIEW.view * vec4(entity.modelMatrix[3].xyz, 1.0);
   float distance = abs(cubeViewPos.z); // Distance from camera in view space (z-axis)

   // Desired size in normalized device coordinates (NDC)
   float desiredSizeNDC = 0.2; // Adjust this for screen size of the cube

   // Calculate the scale factor to counteract perspective
   float scale = desiredSizeNDC * distance;

   // Scale vertex positions relative to cube center
   vec3 scaledVertexPos = inPos * scale;

   // Transform scaled vertex positions back to world space
   vec4 finalWorldPos = entity.modelMatrix * vec4(scaledVertexPos, 1.0);

   // Compute final clip-space position
   outVertex.clipPosition = LINA_VIEW.viewProj * finalWorldPos;

   // Pass the material index to the fragment shader
   outMaterialIndex = drawArguments.materialIndex;
}

#lina_end

#lina_fs

layout(location = 0) flat in uint inMaterialIndex;

struct LinaMaterial
{
   vec4 color;
};

void LINA_FRAG_MAIN(out LinaFragOutput outFrag)
{
    LinaMaterial material = LINA_GET_MATERIAL(inMaterialIndex);
    outFrag.color = material.color;
}

#lina_end
