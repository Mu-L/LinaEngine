/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#LINA_SHADER_CUSTOM

#lina_vs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_Forward.linashader"

layout(location = 0) out vec3 outNearPoint;
layout(location = 1) out vec3 outFarPoint;

vec3 gridPlane[6] = vec3[](
    vec3(1, 1, 0), vec3(-1, -1, 0), vec3(-1, 1, 0),
    vec3(-1, -1, 0), vec3(1, 1, 0), vec3(1, -1, 0)
);

vec3 UnprojectPoint(float x, float y, float z, mat4 view, mat4 projection) {
    mat4 viewInv = inverse(view);
    mat4 projInv = inverse(projection);
    vec4 unprojectedPoint =  viewInv * projInv * vec4(x, y, z, 1.0);
    return unprojectedPoint.xyz / unprojectedPoint.w;
}

void main()
{
    vec3 p = gridPlane[gl_VertexIndex].xyz;
    outNearPoint = UnprojectPoint(p.x, p.y, 0.0, LINA_VIEW.view, LINA_VIEW.proj).xyz; // unprojecting on the near plane
    outFarPoint = UnprojectPoint(p.x, p.y, 1.0, LINA_VIEW.view, LINA_VIEW.proj).xyz; // unprojecting on the far plane
    gl_Position = vec4(p, 1.0); // using directly the clipped coordinates
}

#lina_end

#lina_fs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_Forward.linashader"

layout(location = 0) in vec3 nearPoint;
layout(location = 1) in vec3 farPoint;

layout(location = 0) out vec4 outColor;

vec4 grid(vec3 fragPos3D, float scale, vec3 col) {
    vec2 coord = fragPos3D.xz * scale;
    vec2 derivative = fwidth(coord);
    vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;
    float line = min(grid.x, grid.y);
    float minimumz = min(derivative.y, 1);
    float minimumx = min(derivative.x, 1);
    return vec4(col.xyz, 1.0 - min(line, 1.0));
}

float computeDepth(vec3 pos) {
    vec4 clip_space_pos = LINA_VIEW.proj * LINA_VIEW.view * vec4(pos.xyz, 1.0);
    return (clip_space_pos.z / clip_space_pos.w);
}

float computeLinearDepth(vec3 pos) {
    float near = LINA_VIEW.cameraPositionAndNear.w;
    float far = LINA_VIEW.cameraDirectionAndFar.w;
    vec4 clip_space_pos = LINA_VIEW.proj * LINA_VIEW.view * vec4(pos.xyz, 1.0);
    float clip_space_depth = (clip_space_pos.z / clip_space_pos.w) * 2.0 - 1.0; // put back between -1 and 1
    float linearDepth = (2.0 * near * far) / (far + near - clip_space_depth * (far - near)); // get linear value between 0.01 and 100
    return linearDepth / far; // normalize
}

void main() {
    float t = -nearPoint.y / (farPoint.y - nearPoint.y);
    vec3 fragPos3D = nearPoint + t * (farPoint - nearPoint);
    gl_FragDepth = computeDepth(fragPos3D);

    float linearDepth = computeLinearDepth(fragPos3D);
    float fading = max(0, (0.3 - linearDepth));

    vec4 gridBig = grid(fragPos3D, .25, vec3(0.7, 0.7, 0.7)) * float(t > 0.0);
    vec4 gridSmall = grid(fragPos3D, 1.0, vec3(0.2, 0.2, 0.2))* float(t > 0.0);

    if(gridBig.a > 0.0)
        outColor = gridBig;
    else
        outColor = gridSmall;

    if(fragPos3D.x > -0.02 && fragPos3D.x < 0.02)
        outColor = vec4(1,0,0, outColor.a);

    if(fragPos3D.z > -0.02 && fragPos3D.z < 0.02)
        outColor = vec4(0,0,1, outColor.a);

    outColor.a *= fading;

}

#lina_end
