/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#lina_shader_lighting

#lina_vs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_lighting.linashader"

layout(location = 0) out vec2 outUV;

void main()
{
    outUV = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
    gl_Position = vec4(outUV * 2.0f + -1.0f, 0.0f, 1.0f);
    outUV.y = 1.0f - outUV.y;
}

#lina_end

#lina_fs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_lighting.linashader"

layout (location = 0) in vec2 inUV;
layout (location = 0) out vec4 outFragColor;

float LinearizeDepth(float depth, float near, float far) 
{
    float z = depth * 2.0 - 1.0; // back to NDC  0,0202860042596552
    
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

// float intersectPlane(vec3 planePosition, vec3 rayOrg, vec3 rayDir)
// {
//     vec3 normal = vec3(0, 1,0);
//     float denom = dot(normal, rayDir);
//     if (abs(denom) < 1e-6) {
//        return 0.0;
//     }
//     return dot(planePosition - rayOrg, normal) / denom; 
// }
// 
// vec4 getGridColor(vec2 planeUV)
// {
// 
//   vec3 cameraDirection = normalize(LINA_VIEW.cameraDirectionAndFar.xyz);
//   vec3 cameraPosition = LINA_VIEW.cameraPositionAndNear.xyz;  
//   vec2 ndcUV = -1.0 + 2.0 * vec2(inUV.x, 1.0 - inUV.y);
//   float aspect = LINA_VIEW.size.x / LINA_VIEW.size.y; 
//   // ndcUV.x *= aspect;
// 
//   vec4 clipSpacePosition = vec4(ndcUV.x, ndcUV.y, 0, 2.0 * depth - 1.0);
//   vec4 viewSpacePosition = inverse( LINA_VIEW.proj * LINA_VIEW.view) * clipSpacePosition;
//   vec3 rayDirection = normalize(viewSpacePosition.xyz / viewSpacePosition.w - cameraPosition);
// 
//     float t = intersectPlane(vec3(0.0, 0.0, 0), cameraPosition, rayDirection);
//    float distanceInViewSpace = t;
//     
//      if(t > 0.0)
//      {
//          vec3 intersectPoint = cameraPosition + t * rayDirection;
// 
//          vec4 viewPosition = LINA_VIEW.view * vec4(intersectPoint, 1.0);
//          vec4 clipPosition = LINA_VIEW.proj * viewPosition;
//          float distanceInClip = clipPosition.z / clipPosition.w;
// 
//          if(distanceInClip < depth)
//          {
//              vec2 planeUV = intersectPoint.xz; // Assuming each tile of the texture should appear every 10 units
//              // planeUV = fract(planeUV); // Wrapping UVs to [0, 1] range   
//              outFragColor = getGridColor(planeUV * 0.5);
//              return;
//          }
//      }
//     
//     float l = 1.0 - (length(planeUV * 0.02));
//     float hmod = mod(floor(planeUV.x) + floor(planeUV.y), 2.0);
//     return mix(vec4(0.2, 0.2, 0.2, l), vec4(0.8, 0.8, 0.8, l),  step(hmod, 0.5));
// }

// struct LINA_MATERIAL
// {
//    uint test;
// };


void main()
{
   vec4 albedo = texture(sampler2D(LINA_TEXTURES[LINA_LIGHT_PASS.gBufColorMaterialID], LINA_SAMPLERS[LINA_LIGHT_PASS.gBufSampler]), inUV);
   vec4 normals = texture(sampler2D(LINA_TEXTURES[LINA_LIGHT_PASS.gBufNormal], LINA_SAMPLERS[LINA_LIGHT_PASS.gBufSampler]), inUV);
   vec4 worldPos = texture(sampler2D(LINA_TEXTURES[LINA_LIGHT_PASS.gBufPosition], LINA_SAMPLERS[LINA_LIGHT_PASS.gBufSampler]), inUV);
   vec3 finalColor = albedo.xyz;
   outFragColor = vec4(finalColor.rgb, 1.0);
}

#lina_end
