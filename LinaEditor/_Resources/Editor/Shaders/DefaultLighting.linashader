/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


/*

// Vertex output definition
struct LinaVertexOutput
{
   vec4 clipPosition;
};

// Fragment output definition
struct LinaFragOutput
{
   vec4 color;
};

*/

#lina_variant

#name : "Default"
#vertex: "Resources/Core/Shaders/Common/MainVertexStatic.linashader"
#frag: "Resources/Core/Shaders/Common/MainFragSimple.linashader"
#pass: "Resources/Core/Shaders/Common/RenderPass_Forward.linashader"
#blend: LINA_BLEND_NONE
#depth: LINA_DEPTH_EQUAL
#target: LINA_TARGET_HDR
#cull: LINA_CULL_NONE

#lina_end

#lina_vs

layout(location = 0) out vec2 outUV;

void LINA_VERTEX_MAIN(out LinaVertexOutput outVertex)
{
   outUV = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
   outVertex.clipPosition =  vec4(outUV * 2.0f + -1.0f, 0.0f, 1.0f);
   outUV.y = 1.0f - outUV.y;
}

#lina_end

#lina_fs

layout (location = 0) in vec2 inUV;

void LINA_FRAG_MAIN(out LinaFragOutput outFrag)
{
   vec4 albedo = texture(sampler2D(LINA_TEXTURES[LINA_PASS.gBufColorMaterialID], LINA_SAMPLERS[LINA_PASS.gBufSampler]), inUV);
   vec4 normals = texture(sampler2D(LINA_TEXTURES[LINA_PASS.gBufNormal], LINA_SAMPLERS[LINA_PASS.gBufSampler]), inUV);
   vec4 worldPos = texture(sampler2D(LINA_TEXTURES[LINA_PASS.gBufPosition], LINA_SAMPLERS[LINA_PASS.gBufSampler]), inUV);
   vec3 finalColor = albedo.xyz;
   outFrag.color = vec4(finalColor.rgb, 1.0);
}

#lina_end
