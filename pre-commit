#!/usr/bin/env bash


## Check OS suitability & figure out binary name.
PROCEED_TO_FORMAT=TRUE

if command -v uname &> /dev/null; then
    OS_NAME=$(uname)
else
    # Default to Windows if uname isn't available
    OS_NAME="Windows"
fi

case "$OS_NAME" in
    "Windows"* | "MINGW"* | "MSYS"* | "CYGWIN"*)
        CLANG_FORMAT_EXECUTABLE="clang-format.exe"
        ;;
    "Darwin")
        CLANG_FORMAT_EXECUTABLE="clang-format"
        ;;
    *)
        echo >&2 "Unsupported OS for clang-format script."
        PROCEED_TO_FORMAT=FALSE
        ;;
esac

# Prepare files & directories.
clang_files=$(git diff --cached --name-only --diff-filter=d | egrep '\.(cpp|hpp)$')
unstaged_files=$(git diff --name-only --diff-filter=d | egrep '\.(cpp|hpp)$')
REPO_ROOT=$(git rev-parse --show-toplevel)
CLANG_FORMAT_PATH="$REPO_ROOT/Dependencies/bin/$CLANG_FORMAT_EXECUTABLE"

# Check if clang-format exists at the specified path
if [ ! -f "$CLANG_FORMAT_PATH" ]; then
    echo >&2 "Error: clang-format not found at $CLANG_FORMAT_PATH"
    PROCEED_TO_FORMAT=FALSE
fi

# Function to check if an array contains a value
contains_element () {
    local element
    for element in "${@:2}"; do
        [[ "$element" == "$1" ]] && return 0
    done
    return 1
}

# Format every changed file & re-add to commit.
function check_clang_format() {
    local modified_files=""

    for file in $clang_files; do

        # Skip files based on the skip list
        if contains_element "$file" "${skip_files[@]}"; then
            continue
        fi

        # Check if the file is partially staged (skip if true)
        if contains_element "$file" $unstaged_files; then
            continue
        fi


        # Format the file with clang-format
        "$CLANG_FORMAT_PATH" -i "$file" -style=file
        echo "$file"
        
        # Check if the file has been changed (i.e., it was reformatted)
        if [[ $(git diff "$file") ]]; then
            modified_files="$modified_files $file"
        fi
    done

    if [ ! -z "$modified_files" ]; then
        echo "The following files were re-formatted and will be added to the commit:"
        for file in $modified_files; do
            echo "  $file"
            # Re-stage the file after formatting
            git add "$file"
        done
    fi

    return 0
}

if [ "$PROCEED_TO_FORMAT" == "FALSE" ]; then
        exit 1
    fi
    
    check_clang_format

exit 0
