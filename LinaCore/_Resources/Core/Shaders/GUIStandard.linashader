/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

LINA_PIPELINE_GUI

#include "GlobalData.linashader"

LINA_MATERIAL
{
float4 color1;
float4 color2;
float4 float4pack1;
float4 float4pack2;
int4 int4pack1;
LinaTexture2D diffuse;
}

struct PSInput
{
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD;
	float4 color : COLOR;
};


PSInput VSMain(float2 position : POSITION, float2 uv : TEXCOORD, float4 color : COLOR)
{
	PSInput result;
	result.color = color;
	result.uv = uv;
	result.position = mul(LINA_PROJ, float4(position.xy, 0.0f, 1.0));
	return result;
}

float4 PSMain(PSInput input) : SV_TARGET
{
	float4 finalColor = input.color;

	if (int4pack1.x == 0)
	{
		return finalColor;
	}
	else if (int4pack1.x == 1)
	{
		if (int4pack1.y == 0)
		{
			// Horizontal
			float4 col = lerp(color1, color2, input.uv.x);
			finalColor = float4(col.rgb, int4pack1.z == 1 ? input.color.a : col.a);
		}
		else if (int4pack1.y == 1)
		{
			// Vertical
			float4 col = lerp(color1, color2, input.uv.y);
			finalColor = float4(col.rgb, int4pack1.z == 1 ? input.color.a : col.a);
		}
		else if (int4pack1.y == 2)
		{
			// Radial
			float2 uv = input.uv - float2(0.5, 0.5);
			float dist = length(uv * float4pack2.x);
			float4 col = lerp(color1, color2, dist);
			finalColor = float4(col.rgb, int4pack1.z == 1 ? input.color.a : col.a);
		}
		else if (int4pack1.y == 3)
		{
			// Radial corner
			float dist = length(input.uv * float4pack2.x);
			float4 col = lerp(color1, color2, dist);
			finalColor = float4(col.rgb, int4pack1.z == 1 ? input.color.a : col.a);
		}
	}
	else if (int4pack1.x == 2)
	{
        // Textured
		float2 uv = float2(input.uv.x, input.uv.y);
		float4 col = Lina_SampleTexture2D(diffuse, uv * float4pack1.xy + float4pack1.zw);
		finalColor = float4(col.rgb, int4pack1.z == 1 ? input.color.a : col.a) * color1;
	}
	else if (int4pack1.x == 3)
	{
        // Simple Text
		float a = Lina_SampleTexture2D(diffuse, input.uv).r;
		finalColor = float4(input.color.rgb, a * input.color.a);
	}
	else if (int4pack1.x == 4)
	{
        // SDF text
		float d = Lina_SampleTexture2D(diffuse, input.uv).r;
		float alpha = smoothstep(float4pack2.x - float4pack2.y, float4pack2.x + float4pack2.y, d);
		float3 baseColor = input.color.rgb;
		if (int4pack1.y == 1)
		{
			float border = smoothstep(float4pack2.x + float4pack2.z - float4pack2.y, float4pack2.x + float4pack2.z + float4pack2.y, d);
			baseColor = lerp(color1, input.color, border).rgb;
		}
		finalColor = float4(baseColor, int4pack1.z == 1 ? 1.0f - alpha : alpha);
	}

	return finalColor;
}
