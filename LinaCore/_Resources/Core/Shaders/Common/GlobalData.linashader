/*
This file is a part of: LinaGX
https://github.com/inanevin/LinaGX

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2023-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

layout(set = 0, binding = 0) uniform GlobalData
{
	vec4 mouseScreen;
	vec4 deltaElapsed;
} LINA_GLOBAL;

layout (set = 0, binding = 1) readonly buffer MaterialBuffer
{
	uint data[];
} LINA_MATERIALS;

#define LINA_MOUSE_POS LINA_GLOBAL.mouseScreen.xy
#define LINA_SCREEN_RES LINA_GLOBAL.mouseScreen.zw
#define LINA_DT LINA_GLOBAL.deltaElapsed.x
#define LINA_ET LINA_GLOBAL.deltaElapsed.y

layout (set = 0, binding = 2) uniform texture2D LINA_TEXTURES[];
layout (set = 0, binding = 3) uniform sampler LINA_SAMPLERS[];

struct LinaTexture2D
{
	uint txt;
	uint smp;
};

struct IndirectArguments
{
	uint entityID;
	uint materiaIndex;
};

struct GUIMaterialData
{
	vec4 color1;
	vec4 color2;
	vec4 floatPack1;
	vec4 floatPack2;
	vec4 clip;
	vec2 canvasSize;
	vec2 padding;
};

struct LinaEntity
{
    mat4 modelMatrix;
};

LinaEntity LINA_GET_ENTITY()
{

#ifdef LGX_COMPILE_HLSL
   int argBufferIndex = LGX_DRAW_ID + gl_InstanceIndex;
#else
   int argBufferIndex = gl_InstanceIndex;
#endif  

    IndirectArguments argBuffer = LINA_INDIRECT_ARGUMENTS.data[argBufferIndex];
    uint entityID = argBuffer.entityID;
	return LINA_ENTITIES[entityID];
}

uint LINA_GET_MATERIAL_INDEX()
{

#ifdef LGX_COMPILE_HLSL
   int argBufferIndex = LGX_DRAW_ID + gl_InstanceIndex;
#else
   int argBufferIndex = gl_InstanceIndex;
#endif  

    IndirectArguments argBuffer = LINA_INDIRECT_ARGUMENTS.data[argBufferIndex];
	return argBuffer.materialIndex;
}

texture2D LINA_GET_TEXTURE(LinaTexture2D linaTxt)
{
	return LINA_TEXTURES[linaTxt.txt];
}

sampler LINA_GET_SAMPLER(LinaTexture2D linaTxt)
{
	return LINA_SAMPLERS[linaTxt.smp];
}

vec4 LINA_SAMPLE_TEXTURE(LinaTexture2D linaTxt, vec2 uv)
{
	return texture(sampler2D(LINA_TEXTURES[linaTxt.txt], LINA_SAMPLERS[linaTxt.smp]), uv);
}
