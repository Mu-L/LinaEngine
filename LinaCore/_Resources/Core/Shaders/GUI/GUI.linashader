/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#lina_vs

layout (location = 0) in vec3 pos;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec4 col;

layout (location = 0) out vec4 outCol;
layout (location = 1) out vec2 outUV;
layout (location = 2) flat out uint outDrawID;

void main()
{
   outCol = col;
   outUV = uv;
   outDrawID = LGX_DRAW_ID;
   gl_Position = LINA_VIEW.proj * vec4(pos.x, pos.y, 0.0f, 1.0);
}

#lina_end

#lina_fs

layout (location = 0) in vec4 inCol;
layout (location = 1) in vec2 inUV;
layout (location = 2) flat in uint inDrawID;

layout (location = 0) out vec4 outFragColor;

// BufferType 0: Default
// BufferType 1: Gradient
// BufferType 2: Textured
// BufferType 3: Text
// BufferType 4: SDF Text
// BufferType 5: Horizontal hue
// BufferType 6: Vertical hue
// BufferType 7: Circular wheel hue

vec3 hueSaturationToRGB(float hue, float saturation) {
    float angle = hue * 6.0;
    float r = abs(angle - 3.0) - 1.0;
    float g = 2.0 - abs(angle - 2.0);
    float b = 2.0 - abs(angle - 4.0);
    vec3 rgb = clamp(vec3(r, g, b), 0.0, 1.0);
    return mix(vec3(1.0), rgb, saturation); // Mix the RGB color with white based on saturation
}

const float wheelRadius = 0.5;
const float edgeSmoothness = 0.005;

void main()
{
   outFragColor = inCol;

   GUIMaterialData material = LINA_GUI_MATERIALS.data[inDrawID];

   if(material.clip.z > 0 && material.clip.w > 0)
   {
      if(gl_FragCoord.x < material.clip.x || gl_FragCoord.x > material.clip.x + material.clip.z || gl_FragCoord.y < material.clip.y || gl_FragCoord.y > material.clip.y + material.clip.w)
         discard;
   }
   


   highp int bufferType = int(material.floatPack2.a);
   if(bufferType == 1)
   {
      // floatPack1 = uvMultiply, uvShift
      // floatPack2 = radialInfluence, isAABuffer, radialSize, bufferType
  
      // Linear gradient
      float t1 = inUV.x * material.floatPack1.r + inUV.y * material.floatPack1.g;

      // Radial gradient
      float t2 = length((inUV - material.floatPack1.ba) * material.floatPack2.b);

      float t = t1 * (1.0f - material.floatPack2.r) + t2 * (material.floatPack2.r);

      vec4 col = mix(material.color1, material.color2, t);
      float alpha = inCol.a * material.floatPack2.g + col.a * (1.0f - material.floatPack2.g);
      outFragColor = vec4(col.rgb, alpha); 
   }
   else if(bufferType == 2)
   {
      // Textured
      // floatPack1 = uvMultiply, uvShift
      // floatPack2 = isAABuffer, isSingleChannel,0,bufferType
      // color1 = textureIndex, samplerIndex
       int textureIndex = int(material.color2.r);
       int samplerIndex = int(material.color2.g);
       vec4 col = texture(sampler2D(LINA_TEXTURES[textureIndex], LINA_SAMPLERS[samplerIndex]), inUV * material.floatPack1.rg + material.floatPack1.ba);
       float alpha = inCol.a * material.floatPack2.r + col.a * (1.0f - material.floatPack2.r);
       outFragColor = vec4(col.rgb, alpha) * material.color1; 

       if(int(material.floatPack2.g) == 1)
          outFragColor = vec4(col.r) * material.color1;
   }
   else if(bufferType == 3)
   {
      // Simple Text
      // floatPack1 = 0,0,0,bufferType
      // color1 = textureIndex, samplerIndex
       int textureIndex = int(material.color2.r);
       int samplerIndex = int(material.color2.g);
      outFragColor = vec4(inCol.rgb, texture(sampler2D(LINA_TEXTURES[textureIndex], LINA_SAMPLERS[samplerIndex]), inUV).r * inCol.a);
   }
   else if(bufferType == 4)
   {
      // SDF text
      // floatPack1 = thickness, softness, outlineThickness, outlineSoftness
      // floatPack2 = flipAlpha, 0, 0, bufferType
      // color1 = textureIndex, samplerIndex
       int textureIndex = int(material.color2.r);
       int samplerIndex = int(material.color2.g);
       
     float thickness = material.floatPack1.r;
     float softness = material.floatPack1.g;
     float outlineThickness = material.floatPack1.b;
     float outlineSoftness = material.floatPack1.a;

     float a = texture(sampler2D(LINA_TEXTURES[textureIndex], LINA_SAMPLERS[samplerIndex]), inUV).r;
     float outline = smoothstep(outlineThickness - outlineSoftness, outlineThickness + outlineSoftness, a);
     a = smoothstep(1.0 - thickness - softness, 1.0 - thickness + softness, a);

     vec3 albedo = mix(material.color1.rgb, inCol.rgb, outline);
     a = (1.0f - a) * material.floatPack2.r + a * (1.0f - material.floatPack2.r);
     outFragColor = vec4(albedo, a * inCol.a);
   }
   else if(bufferType == 5)
   {
      float hue = inUV.x;
      
      float r = abs(hue * 6.0 - 3.0) - 1.0;
      float g = 2.0 - abs(hue * 6.0 - 2.0);
      float b = 2.0 - abs(hue * 6.0 - 4.0);
      vec3 color = clamp(vec3(r,g,b), 0.0, 1.0);
      outFragColor = vec4(color, 1.0);
   }
   else if(bufferType == 6)
   {
      float hue = 1.0f - inUV.y;
      
      float r = abs(hue * 6.0 - 3.0) - 1.0;
      float g = 2.0 - abs(hue * 6.0 - 2.0);
      float b = 2.0 - abs(hue * 6.0 - 4.0);
      vec3 color = clamp(vec3(r,g,b), 0.0, 1.0);
      outFragColor = vec4(color, 1.0);
   }
   else if(bufferType == 7)
   {
      
      vec2 position = inUV - vec2(0.5, 0.5);
      float d = length(position);

      float angle = atan(position.y, position.x);
      if (angle < 0.0) angle += 2.0 * 3.14159265; // Adjust for negative angles

      float hue = angle / (2.0 * 3.14159265); // Normalize the angle to get the hue
      float saturation = d / wheelRadius; // Normalize the distance to get the saturation

       // Calculate alpha for anti-aliasing
      float alpha = 1.0;
      if (d > (wheelRadius - edgeSmoothness)) {
          alpha = (wheelRadius - d) / edgeSmoothness;
      }

      outFragColor = vec4(hueSaturationToRGB(hue, saturation) * inCol.rgb, alpha);
   }

}

#lina_end
