/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#lina_vs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_lighting.linashader"

layout (location = 0) in vec3 inPos;
layout (location = 1) in vec3 inNormal;
layout (location = 2) in vec2 inUV;

layout (location = 0) out vec3 outWorldPos;
layout (location = 1) out vec3 outNormal;
layout (location = 2) out vec2 outUV;

void main()
{
   outWorldPos = inPos;
   outNormal = inNormal;
   outUV = inUV;
   mat4 rotView = mat4(mat3(LINA_VIEW.view));
   vec4 clipPos = LINA_VIEW.proj * rotView * vec4(outWorldPos, 1.0);
   gl_Position = clipPos.xyww;
}

#lina_end

#lina_fs

#include "Resources/Core/Shaders/Common/GlobalData.linashader"
#include "Resources/Core/Shaders/Common/RenderPass_lighting.linashader"

layout (location = 0) in vec3 inWorldPos;
layout (location = 1) in vec3 inNormal;
layout (location = 2) in vec2 inUV;

layout (location = 0) out vec4 outFragColor;

// layout(set = 2, binding = 0) uniform MaterialData
// {
//    vec4 color1;
// } material;

float Remap(float val, float fromLow, float fromHigh, float toLow, float toHigh)
{
	return toLow + (val - fromLow) * (toHigh - toLow) / (fromHigh - fromLow);
}

vec3 getSunColor()
{
    float dist = distance(inWorldPos, LINA_ATMOSPHERE.sunPosition.xyz);
    float sunRad = 10;

    return mix(vec3(0.0), vec3(1.0), 1.0 - clamp(dist / sunRad, 0.0, 1.0));
}

vec3 getSkyColor()
{
   float horizon = LINA_ATMOSPHERE.skyHorizonAndBase.w;
   float diffusion = LINA_ATMOSPHERE.skyTopAndDiffusion.w;
   vec3 normalizedDir = normalize(inWorldPos);
   float y = 1.0f - (normalizedDir.y + 1.0) / 2.0;

    float lim1 = horizon - diffusion;
    float lim2 = horizon + diffusion;
    vec3 skyColor;

    if (y < lim1)
    {
        float horizonFactor = smoothstep(0.0, lim1, y);
        skyColor = mix(LINA_ATMOSPHERE.skyTopAndDiffusion.xyz, LINA_ATMOSPHERE.skyHorizonAndBase.xyz, horizonFactor);
    }
    else
    {
        float groundFactor = smoothstep(lim1, lim2, y);
        skyColor = mix(LINA_ATMOSPHERE.skyHorizonAndBase.xyz, LINA_ATMOSPHERE.skyGroundAndCurvature.xyz, groundFactor);
    }

    float sun= dot(normalizedDir, normalize(LINA_ATMOSPHERE.sunPosition.xyz));
    sun = clamp(sun,0.0,1.0);
    sun = pow(sun, LINA_ATMOSPHERE.sunColorAndCoef.w) * 2.0;
    sun = clamp(sun,0.0,1.0);
    return mix(skyColor, LINA_ATMOSPHERE.sunColorAndCoef.xyz, sun);
}

void main()
{
   outFragColor = vec4(getSkyColor(), 1);
}

#lina_end
