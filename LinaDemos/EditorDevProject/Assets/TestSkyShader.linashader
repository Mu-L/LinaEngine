/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#LINA_SHADER_SKY

#lina_vs

// do not modify
struct LinaVertexInput
{
   vec3 pos;
   vec3 normal;
   vec2 uv;
   uint materialID;
};

// do not modify
struct LinaVertexOutput
{
   vec4 pos;
   vec3 normal;
   vec2 uv;
};

void LINA_VERTEX_FUNC(in LinaVertexInput inVertex, out LinaVertexOutput outVertex)
{
   outVertex.pos = vec4(inVertex.pos, 1.0);
   outVertex.normal = inVertex.normal;
   outVertex.uv = inVertex.uv;
}

#lina_end

#lina_fs

// do not modify
struct LinaFragInput
{
   uint materialID;
   vec2 uv;
};

// do not modify
struct LinaFragOutput
{
   vec4 color;
};

struct LinaMaterial
{
   vec4 topColor;
   vec4 horizonColor;
   vec4 groundColor;
   float horizonDiffusion;
};

vec4 ditheredColor(vec4 color, vec2 uv, float strength)
{
    // Generate random noise based on screen UVs.
    float noise = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);
    noise = noise * 2.0 - 1.0; // Map to [-1, 1]

    // Adjust the color based on noise strength.
    color.rgb += noise * strength;
    return color;
}


void LINA_FRAG_FUNC(in LinaFragInput inFrag, out LinaFragOutput outFrag)
{
   LinaMaterial material = LINA_GET_MATERIAL(inFrag.materialID);
   float uvy = inFrag.uv.y * 2.0f - 1.0f;
   float gradientFactor = smoothstep(0, 1, pow(uvy, 1.0));
   outFrag.color = mix(material.topColor, material.groundColor, gradientFactor);
   // ditheredColor(, inFrag.uv, 0.001);
  // outFrag.color = vec4(0,0,1,1);
}

#lina_end

